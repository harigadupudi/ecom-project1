[{"D:\\Rjs1\\New\\ecom1\\src\\index.js":"1","D:\\Rjs1\\New\\ecom1\\src\\reportWebVitals.js":"2","D:\\Rjs1\\New\\ecom1\\src\\App.js":"3","D:\\Rjs1\\New\\ecom1\\src\\components\\test.js":"4","D:\\Rjs1\\New\\ecom1\\src\\components\\shop.js":"5","D:\\Rjs1\\New\\ecom1\\src\\components\\Comp.js":"6","D:\\Rjs1\\New\\ecom1\\src\\components\\minicomp.js":"7"},{"size":500,"mtime":499162500000,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"9"},{"size":394,"mtime":1609923902727,"results":"11","hashOfConfig":"9"},{"size":5297,"mtime":1609922816757,"results":"12","hashOfConfig":"9"},{"size":1537,"mtime":1609923891749,"results":"13","hashOfConfig":"9"},{"size":2059,"mtime":1609922816366,"results":"14","hashOfConfig":"9"},{"size":3894,"mtime":1609922816457,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"ad25am",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"18"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"18"},"D:\\Rjs1\\New\\ecom1\\src\\index.js",[],["34","35"],"D:\\Rjs1\\New\\ecom1\\src\\reportWebVitals.js",[],"D:\\Rjs1\\New\\ecom1\\src\\App.js",["36"],"D:\\Rjs1\\New\\ecom1\\src\\components\\test.js",["37"],"import React, { Component } from 'react'\r\nimport Comp from './Comp'\r\nimport { confirmAlert } from 'react-confirm-alert';\r\nimport M from \"materialize-css\";\r\nimport axios from \"axios\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faShoppingCart } from '@fortawesome/free-solid-svg-icons'\r\nimport Shop from \"./shop\"\r\n\r\nclass test extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        /* this.add = this.add.bind(this) */\r\n        this.state = {\r\n            cart:[],\r\n            post:[],\r\n            fprice:[],\r\n            x:[],\r\n            cart1:new Set(),\r\n            c:false \r\n        }\r\n        this.del = this.del.bind(this)\r\n    }\r\n    \r\n    /* add(){\r\n        const {cart} = this.state\r\n        this.setState({\r\n            cart:[...cart,1]\r\n        },()=>{console.log(this.state.cart)})\r\n        confirmAlert({\r\n            title: 'Confirm to submit',\r\n            message: 'Are you sure to do this.',\r\n            childrenElement: () => <div></div>,\r\n            confirmLabel:\"Confirm\",\r\n            cancelLabel:\"Cancel\",\r\n            onConfirm:()=>M.toast({html: 'I am a toast!'}),\r\n            onCancel:()=>M.toast({\r\n                html:\"Not Confirmed\"\r\n            })\r\n          });\r\n    } */\r\n    componentDidMount(){\r\n        axios.get(\"https://api.mocki.io/v1/7bd0682b\")\r\n            .then(res=>{\r\n                this.setState({\r\n                    post:res.data.products\r\n                })\r\n            } )\r\n            .catch(error =>{\r\n                console.log(error)\r\n            })\r\n            \r\n    }\r\n    hide(){\r\n        this.setState({\r\n            c:false\r\n        })\r\n    }\r\n    show(){\r\n        this.setState({\r\n            c:true\r\n        })\r\n    }\r\n    \r\n    sub(e){\r\n        confirmAlert({\r\n            title: <p className =\"confirm\" >Waiting for your order confirmation</p>,\r\n            message: '',\r\n            buttons: [\r\n              {\r\n                label: 'Yes',\r\n                onClick: () => {M.toast({\r\n                    html:\"Successfully added!\",\r\n                    classes:\"toasts\",\r\n                    displayLength:1800,        \r\n                });\r\n                const {cart,fprice,cart1,x} = this.state;\r\n                console.log(e.target.value)\r\n                console.log(e.target.value.split(\",\")[4])\r\n                if(x.includes(e.target.value.split(\",\")[4])){\r\n                    console.log(\"yes \"+x.indexOf(e.target.value.split(\",\")[4]))\r\n                    let x1 = [...cart];\r\n                    x1[x.indexOf(e.target.value.split(\",\")[4])] = e.target.value.split(\",\");\r\n                    console.log(x1);\r\n                    this.setState({\r\n                        cart:x1,\r\n                    },()=>console.log(this.state.cart)) \r\n                }\r\n                else{\r\n                    this.setState({\r\n                        cart:[...cart,e.target.value.split(\",\")],\r\n                        x:[...x,e.target.value.split(\",\")[4]],\r\n                        /* cart:cart.add([e.target.value]), */\r\n                        cart1:cart1.add(e.target.value.split(\",\")[4],e.target.value),\r\n                        /* fprice:[...fprice,(e.target.value.split(\",\")[2]*e.target.value.split(\",\")[0])] */\r\n                    },()=>console.log(this.state.cart));\r\n                }\r\n                \r\n                /* if(cart[0][0]==e.target.value.split(\",\")[1]){\r\n                    console.log(\"yes\")\r\n                } */\r\n            }\r\n                \r\n              },\r\n              {\r\n                label: 'No',\r\n              }\r\n            ]\r\n          });\r\n    }\r\n\r\n    change(v){\r\n        console.log(v)\r\n\r\n    }\r\n    \r\n    final = (e) => {\r\n        confirmAlert({\r\n          title: 'Added items',\r\n          buttons: [\r\n            {\r\n              label: 'Buy Now',\r\n            },  \r\n          ], \r\n        }\r\n        );\r\n    }\r\n    del = (d)=>{\r\n        console.log('ok ' +d)\r\n        console.log(this.state.cart)\r\n        let x2 = [...this.state.cart]\r\n        x2.splice(this.state.x.indexOf(this.state.id),1)\r\n        console.log(x2)\r\n        this.setState({\r\n            cart:x2\r\n        },()=>console.log(this.state.cart.length))\r\n    }\r\n\r\n    render() {\r\n        const {post} = this.state\r\n        return (\r\n            <div className =\"Main\" >\r\n                <div className =\"head\" >\r\n                    <h2 className =\"headname\" >ProMarket </h2>\r\n                    <span className = \"cart\" onClick = {(e)=>this.show(e)} ><FontAwesomeIcon icon={faShoppingCart} /></span>\r\n                    <span className = \"cartValue\"  >{this.state.cart.length}</span>  \r\n                      \r\n                </div>\r\n                {/* {\r\n                    post.map(x=><p key ={x.id} >{x.image}</p> )\r\n                } */}\r\n                <div className = \"posts\">\r\n                    {\r\n                        post.map(x=> <Comp submit = {(e)=>this.sub(e)}\r\n                        key ={x.id} id ={x.id} name ={x.name} img ={x.image} price = {x.price} ></Comp> )\r\n                    }\r\n                </div>\r\n                {this.state.c ? <Shop hide = {(e)=>this.hide(e)} val = {this.state.cart} x1 = {this.state.x} del ={this.del} ></Shop> :null }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default test\r\n","D:\\Rjs1\\New\\ecom1\\src\\components\\shop.js",["38","39","40"],"D:\\Rjs1\\New\\ecom1\\src\\components\\Comp.js",["41"],"import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport \"./Comp.css\"\r\nimport 'react-confirm-alert/src/react-confirm-alert.css'; // Import css\r\n\r\nclass Comp extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n             quant:1,\r\n             name:props.name,\r\n             img:props.image,\r\n             price:props.price\r\n        }\r\n    }\r\n    dec(){\r\n        if(this.state.quant>1){\r\n            this.setState((prevstate)=>({\r\n                quant:prevstate.quant-1\r\n            }))\r\n        }\r\n    }\r\n    inc(){\r\n        this.setState((prevstate)=>({\r\n            quant:prevstate.quant+1\r\n        }))\r\n    }\r\n\r\n    /* submit = (e) => {\r\n        confirmAlert({\r\n          title: 'Waiting for your order confirmation',\r\n          message: '',\r\n          buttons: [\r\n            {\r\n              label: 'Yes',\r\n              onClick: () => {M.toast({\r\n                  html:\"New product has been added\",\r\n                  classes:\"toast\"\r\n              });console.log(\"called\"+e.target.value)}\r\n            },\r\n            {\r\n              label: 'No',\r\n              onClick: () => alert('Click No')\r\n            }\r\n          ]\r\n        });\r\n      }; */\r\n      \r\n\r\n    render() {\r\n        const {quant} = this.state\r\n        const {name,img,price,id} = this.props\r\n        return (\r\n            <div className = \"comp\">\r\n                <img src ={img} alt =\"veg\"\r\n                width = \"160\" height =\"150\" className = \"img\"></img>\r\n                <p>{name}</p>\r\n                <p><b>Rs {price}</b> </p>\r\n                <span><button onClick ={() => this.dec()} className = \"ind\" >-</button><input type = \"text\" className=\"quant\" value ={this.state.quant} disabled></input>\r\n                <button onClick = {()=> this.inc()} className = \"ind\" >+</button></span>\r\n                <p><button className = \"ac\" onClick ={this.props.submit} value = {[quant,name,price,img,id]} >ADD TO CART</button></p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Comp\r\n","D:\\Rjs1\\New\\ecom1\\src\\components\\minicomp.js",["42","43","44","45"],"import React, { Component } from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTrashAlt} from '@fortawesome/free-solid-svg-icons'\r\nimport { confirmAlert } from 'react-confirm-alert';\r\n\r\nclass minicomp extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n             fcart:props.val,\r\n             x:props.x1,\r\n             price:props.price,\r\n             quant:parseInt(props.quant),\r\n             x2:props.x2,\r\n             x1:0,\r\n             id:props.id,\r\n             c:true\r\n        }\r\n    }\r\n    dec(e){\r\n        if(this.state.quant>0){\r\n            this.setState((prevstate)=>({\r\n                quant:prevstate.quant -1,\r\n            }),()=>{this.props.check(parseInt(-this.state.price))},\r\n            )\r\n        }\r\n        /* else if((this.state.quant-1) == 0){\r\n            this.setState({\r\n                c:false\r\n            })\r\n        } */\r\n        if((this.state.quant-1)===0){\r\n            confirmAlert({\r\n                title:'Confirm',\r\n                message:'Are you sure want to delete',\r\n                buttons:[\r\n                    {\r\n                        label:'Yes',\r\n                        onClick:()=>{\r\n                            this.setState({\r\n                                c:false\r\n                            },this.props.check(-this.state.price*this.state.quant*this.state.x2))\r\n                        }\r\n                    },\r\n                    {\r\n                        label:'No',\r\n                        onClick:()=>{\r\n                            this.setState((prevstate)=>({\r\n                                quant:prevstate.quant+1\r\n                            }),this.props.check(this.state.price*this.state.x2))\r\n                        }\r\n                    }\r\n                ]\r\n            })\r\n        }\r\n    }\r\n    inc(e){\r\n        /* this.c1(); */\r\n        this.setState((prevstate)=>({ \r\n            quant:prevstate.quant+1,\r\n        }),()=>this.props.check(parseInt(this.state.price)))\r\n    }\r\n\r\n    change(e){\r\n        console.log(this.state.price*this.state.quant*this.state.x2);\r\n        this.props.check(this.state.price*this.state.quant*this.state.x2)\r\n    }\r\n    del(e){\r\n        confirmAlert({\r\n            title:'Confirm',\r\n            message:'Are you sure want to delete',\r\n            buttons:[\r\n                {\r\n                    label:'Yes',\r\n                    onClick:()=>{\r\n                        this.setState({\r\n                            c:false\r\n                        },this.props.check(-this.state.price*this.state.quant*this.state.x2))\r\n                        this.props.d1(this.state.id)\r\n                    }\r\n                },\r\n                {\r\n                    label:'No'\r\n                }\r\n            ]\r\n        })\r\n        \r\n    }\r\n    render() {\r\n        const {fcart,x,x1,x2,c,quant} = this.state\r\n        const {name,image,price,check} = this.props\r\n        return (c?\r\n            <div className = 'fitems1' onLoad ={(e)=>this.change(e)} value ={price*quant*x2} >\r\n                <div className = 'f1'><img src = {image} width = '120px' alt = 'logo' value ={price*quant*x2} ></img> </div>\r\n                <div className = 'f2'>{name}</div>\r\n                <div className = 'f3'><button onClick = {(e) => this.dec(e)}  >-</button><input className ='f5' type ='text'\r\n                 onLoad = {(e)=>this.change(e)} value ={quant} readOnly></input><button onClick = {(e)=>this.inc(e)} >+</button></div>\r\n                <div className = 'f4'>₹{price}</div>\r\n                <div className = \"fs\" >\r\n                    <p value = {price*quant*x2} >{price*quant*x2}</p>\r\n                </div>\r\n                <div className = 'f6' onClick = {(e)=>this.del(e)} ><FontAwesomeIcon icon={faTrashAlt} /></div>\r\n\r\n            </div> :null\r\n        )\r\n    }\r\n}\r\n\r\nexport default minicomp\r\n",{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","severity":1,"message":"51","line":4,"column":8,"nodeType":"52","messageId":"53","endLine":4,"endColumn":12},{"ruleId":"50","severity":1,"message":"54","line":78,"column":29,"nodeType":"52","messageId":"53","endLine":78,"endColumn":35},{"ruleId":"50","severity":1,"message":"55","line":29,"column":22,"nodeType":"52","messageId":"53","endLine":29,"endColumn":23},{"ruleId":"50","severity":1,"message":"56","line":29,"column":24,"nodeType":"52","messageId":"53","endLine":29,"endColumn":26},{"ruleId":"50","severity":1,"message":"57","line":29,"column":30,"nodeType":"52","messageId":"53","endLine":29,"endColumn":31},{"ruleId":"50","severity":1,"message":"58","line":2,"column":10,"nodeType":"52","messageId":"53","endLine":2,"endColumn":14},{"ruleId":"50","severity":1,"message":"59","line":91,"column":16,"nodeType":"52","messageId":"53","endLine":91,"endColumn":21},{"ruleId":"50","severity":1,"message":"55","line":91,"column":22,"nodeType":"52","messageId":"53","endLine":91,"endColumn":23},{"ruleId":"50","severity":1,"message":"56","line":91,"column":24,"nodeType":"52","messageId":"53","endLine":91,"endColumn":26},{"ruleId":"50","severity":1,"message":"60","line":92,"column":33,"nodeType":"52","messageId":"53","endLine":92,"endColumn":38},"no-native-reassign",["61"],"no-negated-in-lhs",["62"],"no-unused-vars","'Shop' is defined but never used.","Identifier","unusedVar","'fprice' is assigned a value but never used.","'x' is assigned a value but never used.","'x1' is assigned a value but never used.","'c' is assigned a value but never used.","'Link' is defined but never used.","'fcart' is assigned a value but never used.","'check' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]